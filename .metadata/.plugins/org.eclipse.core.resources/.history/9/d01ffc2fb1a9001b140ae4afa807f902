package nl_study_01;

public class JavaOperators {
	public static void main(String[] args) {
		// +,-,*,/ 넘어갈게요
		// String -> 원시 데이터 타입 아니다. 모든 객체는 시작 문자가 대문자.
		String hello = "hello"; // single quote 는 char, double quote 는 String 용입니다.
		String world = "world";
		System.out.println(3 + 5);
		System.out.println(hello + " " + world); // concat -> 접합이 된다. 붙는다.
		
		// ==(같다), !=(다르다) => return 타입이 boolean (true, false)
		System.out.println(3 == 5);
		System.out.println(4 != 7);
		
		// 같은 객체를 참조하는, 다른 인스턴스가 된다.
		// 인스턴스 -> 메모리를 점유하는 고유한 존재
		
		Car car1 = new Car(10, "벤츠");
		// car1 은 Car 라는 객체를 기반으로 만들어진 인스턴스!
		// car1 이 나타내는 값 -> car1이 있는 메모리의 주소
		Car car2 = new Car(20, "아반떼");
		// car2 는 Car 라는 객체를 기반으로 만들어진 인스턴스!
		System.out.println(car1 == car2);
		// 객체끼리 비교하는 ==, != 연산자는
		// 객체의 값을 비교하는 게 아니고!!!!
		// 객체의 메모리 주소를 비교한다!!!!
		
		String s1 = "NL";
		// s1 이라는 "변수" 는, String 이라는 "타입"을 가지고, 이 String 타입은, 객체 타입 이다. 왜냐 ? 원시적 타입이 아니니까!
		String s2 = "NL";
		System.out.println(s1 == s2);
		// 1번 : true
		// 2번 : false
		
		// &&(AND), ||(OR)
		
		// if(조건) { 조건이 성립할 경우 실행할 문장}
		int num = 18;
		if(num % 2 == 0) { // num 이 짝수라면
			System.out.println("짝수임!");
		}
		if(num % 3 == 0) {
			System.out.println("3으로 나누어 떨어짐!");
		}
	}
}
